import gmsh
import numpy as np
import dolfinx
from dolfinx.cpp.mesh import Geometry_float32, Geometry_float64
from mpi4py import MPI
from petsc4py import PETSc
from dolfinx.fem import (Constant, Function, FunctionSpace,
                         assemble_scalar, dirichletbc, form, locate_dofs_topological, set_bc, locate_dofs_geometrical)
from dolfinx.io import (VTXWriter, distribute_entity_data, gmshio, XDMFFile)
from ufl import (FacetNormal, FiniteElement, Identity, Measure, TestFunction, TrialFunction, VectorElement,
                 as_vector, div, dot, ds, dx, inner, lhs, grad, nabla_grad, rhs, sym)

mesh, cell_tags, facet_tags = gmshio.read_from_msh(
        "mesh_v1.msh", MPI.COMM_WORLD, 0, gdim=2)

gmsh.initialize()
if MPI.COMM_WORLD.rank == 0:
    gmsh.model.add("Mesh from file")
    gmsh.merge("mesh_v1.msh")
output = gmshio.model_to_mesh(gmsh.model, MPI.COMM_WORLD, 0, gdim=2)
gmsh.finalize()

v_cg2 = VectorElement("Lagrange", mesh.ufl_cell(), 2)
s_cg1 = FiniteElement("Lagrange", mesh.ufl_cell(), 1)
V = FunctionSpace(mesh, v_cg2)
Q = FunctionSpace(mesh, s_cg1)

u = TrialFunction(V)
v = TestFunction(V)
p = TrialFunction(Q)
q = TestFunction(Q)

u_ref = 1.2
z_ref = 2
class InletVelocity():
    def __call__(self, x):
        values = np.zeros((2, x.shape[1]), dtype=PETSc.ScalarType)
        values[0] = u_ref * pow(x[1] / z_ref, 0.16)
        return values

# Inlet
print(facet_tags)
u_inlet = Function(V)
inlet_velocity = InletVelocity()
u_inlet.interpolate(inlet_velocity)
features = facet_tags.find(1)
bcu_inflow = dirichletbc(u_inlet, locate_dofs_topological(V, 1, features))
print(features)
# Walls
u_nonslip = np.array((0,) * mesh.geometry.dim, dtype=PETSc.ScalarType)

with dolfinx.io.XDMFFile(mesh.comm, "ft.xdmf", "w") as xdmf:
    xdmf.write_mesh(mesh)
    xdmf.write_meshtags(facet_tags, dolfinx.cpp.mesh.Geometry_float32)


